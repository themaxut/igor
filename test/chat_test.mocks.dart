// Mocks generated by Mockito 5.4.2 from annotations
// in igor/test/chat_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:bloc/bloc.dart' as _i10;
import 'package:igor/models/chat_message.dart' as _i2;
import 'package:igor/services/chat/bloc/chat_bloc.dart' as _i8;
import 'package:igor/services/chat/bloc/chat_event.dart' as _i9;
import 'package:igor/services/chat/bloc/chat_state.dart' as _i5;
import 'package:igor/services/chat/openai_service.dart' as _i3;
import 'package:igor/services/firestore/firestore_chat_message.dart' as _i7;
import 'package:igor/services/firestore/firestore_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeChatMessage_0 extends _i1.SmartFake implements _i2.ChatMessage {
  _FakeChatMessage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOpenAIService_1 extends _i1.SmartFake implements _i3.OpenAIService {
  _FakeOpenAIService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirestoreService_2 extends _i1.SmartFake
    implements _i4.FirestoreService {
  _FakeFirestoreService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChatState_3 extends _i1.SmartFake implements _i5.ChatState {
  _FakeChatState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OpenAIService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenAIService extends _i1.Mock implements _i3.OpenAIService {
  MockOpenAIService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.ChatMessage> chat(_i2.ChatMessage? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #chat,
          [message],
        ),
        returnValue: _i6.Future<_i2.ChatMessage>.value(_FakeChatMessage_0(
          this,
          Invocation.method(
            #chat,
            [message],
          ),
        )),
      ) as _i6.Future<_i2.ChatMessage>);
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i4.FirestoreService {
  MockFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> addChatMessage(
    String? userId,
    _i7.FirestoreChatMessage? chatMessage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addChatMessage,
          [
            userId,
            chatMessage,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  _i6.Stream<List<_i7.FirestoreChatMessage>> getChatHistory(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChatHistory,
          [userId],
        ),
        returnValue: _i6.Stream<List<_i7.FirestoreChatMessage>>.empty(),
      ) as _i6.Stream<List<_i7.FirestoreChatMessage>>);
  @override
  _i6.Future<void> clearChatHistory(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #clearChatHistory,
          [userId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ChatBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatBloc extends _i1.Mock implements _i8.ChatBloc {
  MockChatBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.OpenAIService get openAIService => (super.noSuchMethod(
        Invocation.getter(#openAIService),
        returnValue: _FakeOpenAIService_1(
          this,
          Invocation.getter(#openAIService),
        ),
      ) as _i3.OpenAIService);
  @override
  _i4.FirestoreService get firestoreService => (super.noSuchMethod(
        Invocation.getter(#firestoreService),
        returnValue: _FakeFirestoreService_2(
          this,
          Invocation.getter(#firestoreService),
        ),
      ) as _i4.FirestoreService);
  @override
  String get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: '',
      ) as String);
  @override
  _i5.ChatState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeChatState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.ChatState);
  @override
  _i6.Stream<_i5.ChatState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i6.Stream<_i5.ChatState>.empty(),
      ) as _i6.Stream<_i5.ChatState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i9.ChatEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i9.ChatEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i5.ChatState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i9.ChatEvent>(
    _i10.EventHandler<E, _i5.ChatState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i10.Transition<_i9.ChatEvent, _i5.ChatState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
  @override
  void onChange(_i10.Change<_i5.ChatState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
